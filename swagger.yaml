openapi: 3.0.0
info:
  title: Cross-border Payment API
  description: |
    ## Overview
    
    A production-ready REST API for handling cross-border payments with USD onramp and multi-currency payout capabilities. 
    Built with domain-driven design principles and comprehensive error handling.
    
    ## Architecture
    
    - **Domain Layer**: Core business entities and interfaces
    - **Application Layer**: Business services and use cases  
    - **Infrastructure Layer**: Database, caching, and external providers
    - **Presentation Layer**: REST API routes and middleware
    
    ## Error Handling
    
    All errors follow a consistent format with:
    - `name`: Error class name
    - `code`: Machine-readable error code
    - `message`: Human-readable description
    - `statusCode`: HTTP status code
    - `timestamp`: When the error occurred
    
    ## Features
    
    - ✅ Type-safe domain interfaces
    - ✅ Custom error types with proper status codes
    - ✅ Decimal precision for financial calculations
    - ✅ Idempotency support
    - ✅ Comprehensive validation
    - ✅ Event sourcing and audit trails
    
  version: 1.0.0
  contact:
    name: API Support

servers:
  - url: http://localhost:3000/api/v1
    description: Local Development Server

components:
  schemas:
    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique payment identifier
        idempotencyKey:
          type: string
          description: Client-provided key for idempotency
        sourceAmount:
          type: number
          format: decimal
          description: Amount in source currency
        sourceCurrency:
          type: string
          example: "USD"
          description: Source currency code (ISO 4217)
        targetAmount:
          type: number
          format: decimal
          description: Amount in target currency
        targetCurrency:
          type: string
          example: "EUR"
          description: Target currency code (ISO 4217)
        exchangeRate:
          type: number
          format: decimal
          description: Exchange rate used for conversion
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED]
          description: Current payment status
        customerId:
          type: string
          description: Customer identifier
        customerEmail:
          type: string
          format: email
          description: Customer email address
        recipientName:
          type: string
          description: Name of payment recipient
        recipientAccount:
          type: string
          description: Recipient account details
        description:
          type: string
          description: Payment description
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true

    PaymentQuote:
      type: object
      properties:
        sourceAmount:
          type: number
        sourceCurrency:
          type: string
        targetAmount:
          type: number
        targetCurrency:
          type: string
        exchangeRate:
          type: number
        totalFees:
          type: number
        netAmount:
          type: number

    Fee:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          example: "processing"
        amount:
          type: number
        currency:
          type: string
        rate:
          type: number
          nullable: true
        provider:
          type: string
          nullable: true
        description:
          type: string
          nullable: true

    Error:
      type: object
      properties:
        name:
          type: string
          description: Error class name
          example: "PaymentNotFoundError"
        code:
          type: string
          description: Machine-readable error code
          example: "PAYMENT_NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "Payment with ID abc-123 not found"
        statusCode:
          type: integer
          description: HTTP status code
          example: 404
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2024-01-15T10:30:00Z"

    PaymentNotFoundError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            name:
              example: "PaymentNotFoundError"
            code:
              example: "PAYMENT_NOT_FOUND"
            statusCode:
              example: 404

    DuplicatePaymentError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            name:
              example: "DuplicatePaymentError"
            code:
              example: "DUPLICATE_PAYMENT"
            statusCode:
              example: 409

    InvalidCurrencyError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            name:
              example: "InvalidCurrencyError"
            code:
              example: "INVALID_CURRENCY"
            statusCode:
              example: 400

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            name:
              example: "ValidationError"
            code:
              example: "VALIDATION_ERROR"
            statusCode:
              example: 400

    PaymentProcessingError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            name:
              example: "PaymentProcessingError"
            code:
              example: "PAYMENT_PROCESSING_ERROR"
            statusCode:
              example: 500

    InsufficientFundsError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            name:
              example: "InsufficientFundsError"
            code:
              example: "INSUFFICIENT_FUNDS"
            statusCode:
              example: 400

    ExchangeRateError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            name:
              example: "ExchangeRateError"
            code:
              example: "EXCHANGE_RATE_ERROR"
            statusCode:
              example: 500

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/PaymentNotFoundError'
          examples:
            payment_not_found:
              summary: Payment not found
              value:
                name: "PaymentNotFoundError"
                code: "PAYMENT_NOT_FOUND"
                message: "Payment with ID abc-123 not found"
                statusCode: 404
                timestamp: "2024-01-15T10:30:00Z"
    
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ValidationError'
              - $ref: '#/components/schemas/InvalidCurrencyError'
              - $ref: '#/components/schemas/InsufficientFundsError'
          examples:
            validation_error:
              summary: Validation failed
              value:
                name: "ValidationError"
                code: "VALIDATION_ERROR"
                message: "Validation failed for sourceAmount: must be positive"
                statusCode: 400
                timestamp: "2024-01-15T10:30:00Z"
            invalid_currency:
              summary: Invalid currency
              value:
                name: "InvalidCurrencyError"
                code: "INVALID_CURRENCY"
                message: "Invalid currency: XYZ"
                statusCode: 400
                timestamp: "2024-01-15T10:30:00Z"
    
    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DuplicatePaymentError'
          examples:
            duplicate_payment:
              summary: Duplicate payment
              value:
                name: "DuplicatePaymentError"
                code: "DUPLICATE_PAYMENT"
                message: "Payment with idempotency key test-001 already exists"
                statusCode: 409
                timestamp: "2024-01-15T10:30:00Z"
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/PaymentProcessingError'
              - $ref: '#/components/schemas/ExchangeRateError'
          examples:
            processing_error:
              summary: Payment processing failed
              value:
                name: "PaymentProcessingError"
                code: "PAYMENT_PROCESSING_ERROR"
                message: "Payment processing failed: provider unavailable"
                statusCode: 500
                timestamp: "2024-01-15T10:30:00Z"
            exchange_rate_error:
              summary: Exchange rate error
              value:
                name: "ExchangeRateError"
                code: "EXCHANGE_RATE_ERROR"
                message: "Failed to get exchange rate from USD to EUR"
                statusCode: 500
                timestamp: "2024-01-15T10:30:00Z"

paths:
  /payments:
    post:
      summary: Create a new payment
      description: Create a new cross-border payment with the specified details
      operationId: createPayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idempotencyKey
                - sourceAmount
                - sourceCurrency
                - targetCurrency
                - customerId
              properties:
                idempotencyKey:
                  type: string
                sourceAmount:
                  type: number
                sourceCurrency:
                  type: string
                targetCurrency:
                  type: string
                customerId:
                  type: string
                customerEmail:
                  type: string
                  format: email
                recipientName:
                  type: string
                recipientAccount:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      payment:
                        $ref: '#/components/schemas/Payment'
                      quote:
                        $ref: '#/components/schemas/PaymentQuote'
                      fees:
                        type: array
                        items:
                          $ref: '#/components/schemas/Fee'
                      summary:
                        type: object
                        properties:
                          paymentId:
                            type: string
                          status:
                            type: string
                          sourceAmount:
                            type: number
                          targetAmount:
                            type: number
                          totalFees:
                            type: number
                          netAmount:
                            type: number
                          exchangeRate:
                            type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: List all payments
      description: Retrieve a list of all payments with optional filtering
      operationId: listPayments
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED]
        - name: customerId
          in: query
          schema:
            type: string
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of payments
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /payments/{id}:
    get:
      summary: Get payment details
      description: Retrieve detailed information about a specific payment
      operationId: getPayment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Payment'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /payments/{id}/process:
    post:
      summary: Process a payment
      description: Start processing a pending payment
      operationId: processPayment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment processing started
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [PROCESSING]
                      steps:
                        type: array
                        items:
                          type: object
                          properties:
                            step:
                              type: string
                            status:
                              type: string
                            duration:
                              type: number
                            details:
                              type: object
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /quote:
    post:
      summary: Get payment quote
      description: Get exchange rate and fee quote for a potential payment
      operationId: getQuote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sourceAmount
                - sourceCurrency
                - targetCurrency
              properties:
                sourceAmount:
                  type: number
                sourceCurrency:
                  type: string
                targetCurrency:
                  type: string
      responses:
        '200':
          description: Payment quote
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/PaymentQuote'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      summary: Health check
      description: Check the health status of the API and its dependencies
      operationId: healthCheck
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, unhealthy]
                  checks:
                    type: object
                    properties:
                      database:
                        type: object
                        properties:
                          status:
                            type: string
                          responseTime:
                            type: number
                      redis:
                        type: object
                        properties:
                          status:
                            type: string
                          responseTime:
                            type: number 